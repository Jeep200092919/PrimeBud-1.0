import streamlit as st
import requests
import json
import os

# ==============================
# CONFIGURA√á√ïES INICIAIS
# ==============================
st.set_page_config(page_title="PrimeBud 1.0 ‚Äî LLaMA 3.3 70B", page_icon="ü§ñ", layout="wide")

# Endpoints
OLLAMA_URL = "http://localhost:11434/api/chat"
GROQ_URL = "https://api.groq.com/openai/v1/chat/completions"

# Secrets / Env
GROQ_API_KEY = st.secrets.get("GROQ_API_KEY", os.getenv("GROQ_API_KEY", ""))
GROQ_MODEL = st.secrets.get("GROQ_MODEL", os.getenv("GROQ_MODEL", "llama3.3-70b-versatile"))

GITHUB_URL = "https://github.com/Jeep200092919/PrimeBud-1.0"

# ==============================
# LOGIN / CONTAS
# ==============================
if "usuarios" not in st.session_state:
    st.session_state.usuarios = {
        "teste": {"senha": "0000", "plano": "Free"},
    }

if "usuario" not in st.session_state:
    st.session_state.usuario = None
if "plano" not in st.session_state:
    st.session_state.plano = None

if st.session_state.usuario is None:
    st.title("ü§ñ PrimeBud 1.0 ‚Äî LLaMA 3.3 70B")
    st.link_button("üåê Ver no GitHub", GITHUB_URL)
    st.markdown("---")

    tabs = st.tabs(["Entrar", "Criar conta", "Convidado (Ultra)"])

    with tabs[0]:
        u = st.text_input("Usu√°rio")
        p = st.text_input("Senha", type="password")
        if st.button("Entrar"):
            db = st.session_state.usuarios
            if u in db and db[u]["senha"] == p:
                st.session_state.usuario = u
                st.session_state.plano = db[u]["plano"]
                st.success(f"Bem-vindo, {u}!")
                st.rerun()
            else:
                st.error("Usu√°rio ou senha incorretos.")

    with tabs[1]:
        novo_u = st.text_input("Novo usu√°rio")
        nova_s = st.text_input("Nova senha", type="password")
        plano_i = st.selectbox("Plano inicial", ["Free", "Pro", "Ultra", "Trabalho", "Professor"])
        if st.button("Criar conta"):
            db = st.session_state.usuarios
            if novo_u in db:
                st.warning("Usu√°rio j√° existe.")
            else:
                db[novo_u] = {"senha": nova_s, "plano": plano_i}
                st.session_state.usuario = novo_u
                st.session_state.plano = plano_i
                st.success(f"Conta criada e login autom√°tico como {novo_u} ({plano_i}).")
                st.rerun()

    with tabs[2]:
        if st.button("Entrar como Convidado (Ultra)"):
            st.session_state.usuario = "Convidado"
            st.session_state.plano = "Ultra"
            st.success("Entrou como convidado ‚Äî Plano Ultra liberado.")
            st.rerun()
    st.stop()

usuario = st.session_state.usuario
plano = st.session_state.plano

# ==============================
# BACKEND ‚Äî GROQ + FALLBACK OLLAMA
# ==============================
def usar_groq() -> bool:
    return bool(GROQ_API_KEY)

def _map_options_for_openai_like(options: dict | None) -> dict:
    options = options or {}
    return {
        "temperature": options.get("temperature", 0.6),
        "top_p": options.get("top_p", 0.9),
        "max_tokens": options.get("num_predict", 400),
    }

def chat_api(model: str, prompt: str, historico, options: dict | None = None, timeout: int = 120) -> str:
    """Envia o hist√≥rico completo do chat √† Groq ou Ollama."""
    messages = [{"role": "system", "content": "Voc√™ √© o PrimeBud Turbo ‚Äî claro, r√°pido e √∫til."}]
    for m in historico:
        if m["autor"] == "Voc√™":
            messages.append({"role": "user", "content": m["texto"]})
        else:
            messages.append({"role": "assistant", "content": m["texto"]})
    messages.append({"role": "user", "content": prompt})

    if usar_groq():
        payload = {
            "model": GROQ_MODEL,
            "messages": messages,
            "stream": False,
            **_map_options_for_openai_like(options),
        }
        headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
        try:
            r = requests.post(GROQ_URL, headers=headers, json=payload, timeout=timeout)
            data = r.json()
            return data["choices"][0]["message"]["content"]
        except Exception as e:
            return f"‚ùå Erro Groq: {str(e)}"

    # Fallback: Ollama local
    payload = {"model": model, "stream": False, "messages": messages}
    if options:
        payload["options"] = options
    try:
        r = requests.post(OLLAMA_URL, json=payload, timeout=timeout)
        data = r.json()
        return data.get("message", {}).get("content", "‚ö†Ô∏è Erro: resposta inv√°lida do Ollama.")
    except Exception as e:
        return f"‚ùå Erro Ollama: {str(e)}"

# ==============================
# MODOS E CONFIGURA√á√ïES
# ==============================
MODOS_DESC = {
    "‚ö° Flash": "Respostas curt√≠ssimas e instant√¢neas.",
    "üîµ Normal": "Respostas equilibradas e naturais.",
    "üçÉ Econ√¥mico": "Respostas curtas e otimizadas.",
    "üí¨ Mini": "Conversa leve e simples.",
    "üíé Pro (Beta)": "C√≥digo + breve explica√ß√£o.",
    "‚òÑÔ∏è Ultra (Beta)": "Mais tokens e contexto.",
    "‚úçÔ∏è Escritor": "Texto criativo de 5‚Äì10 linhas.",
    "üè´ Escola": "Explica√ß√µes did√°ticas do EM.",
    "üë®‚Äçüè´ Professor": "Aulas e resumos com exemplos.",
    "üé® Designer": "Ideias visuais e UI/UX.",
    "üíª Codificador": "C√≥digo limpo + explica√ß√£o curta.",
    "üß© Estrat√©gias": "Planos pr√°ticos com metas e a√ß√µes.",
}

def gerar_resposta(modo: str, msg: str, historico) -> str:
    """Gera resposta do PrimeBud com mem√≥ria de conversa e ajuste autom√°tico de tokens."""
    base_prompt = MODOS_DESC.get(modo, "Seja direto e √∫til.")
    full_prompt = f"{base_prompt}\n\n{msg}"

    palavras = len(msg.split())
    if palavras < 40:
        base_tokens = 400
    elif palavras < 120:
        base_tokens = 800
    else:
        base_tokens = 1200

    config = {
        "‚ö° Flash": {"temperature": 0.3, "num_predict": min(150, base_tokens)},
        "üîµ Normal": {"temperature": 0.5, "num_predict": min(600, base_tokens + 200)},
        "üçÉ Econ√¥mico": {"temperature": 0.4, "num_predict": min(250, base_tokens)},
        "üí¨ Mini": {"temperature": 0.6, "num_predict": min(300, base_tokens)},
        "üíé Pro (Beta)": {"temperature": 0.35, "num_predict": min(900, base_tokens + 300)},
        "‚òÑÔ∏è Ultra (Beta)": {"temperature": 0.6, "num_predict": min(1300, base_tokens + 500)},
        "‚úçÔ∏è Escritor": {"temperature": 0.9, "num_predict": min(1000, base_tokens + 300)},
        "üè´ Escola": {"temperature": 0.6, "num_predict": min(800, base_tokens + 200)},
        "üë®‚Äçüè´ Professor": {"temperature": 0.4, "num_predict": min(1200, base_tokens + 400)},
        "üé® Designer": {"temperature": 0.95, "num_predict": min(900, base_tokens + 200)},
        "üíª Codificador": {"temperature": 0.2, "num_predict": min(1000, base_tokens + 300)},
        "üß© Estrat√©gias": {"temperature": 0.6, "num_predict": min(1100, base_tokens + 400)},
    }

    opt = config.get(modo, {"temperature": 0.6, "num_predict": 800})
    return chat_api(GROQ_MODEL, full_prompt, historico, opt)

# ==============================
# ESTADO E INTERFACE
# ==============================
if "chats" not in st.session_state:
    st.session_state.chats = [{"nome": "Chat 1", "historico": []}]
if "chat_atual" not in st.session_state:
    st.session_state.chat_atual = 0

def novo_chat():
    n = len(st.session_state.chats) + 1
    st.session_state.chats.append({"nome": f"Chat {n}", "historico": []})
    st.session_state.chat_atual = n - 1
    st.success(f"Novo chat criado ‚Äî Chat {n}")
    st.rerun()

# ==============================
# SIDEBAR
# ==============================
with st.sidebar:
    st.title(f"ü§ñ PrimeBud ‚Äî {usuario}")
    st.markdown(f"**Plano atual:** {plano}")

    # Trocar plano depois do login
    planos = ["Free", "Pro", "Ultra", "Trabalho", "Professor"]
    novo_plano = st.selectbox("Alterar plano:", planos, index=planos.index(plano))
    if st.button("üíº Atualizar plano"):
        st.session_state.plano = novo_plano
        st.session_state.usuarios[usuario]["plano"] = novo_plano
        st.success(f"Plano alterado para {novo_plano} com sucesso!")
        st.rerun()

    st.link_button("üåê GitHub", GITHUB_URL)
    st.divider()

    if st.button("‚ûï Novo chat"):
        novo_chat()

    nomes = [c["nome"] for c in st.session_state.chats]
    idx = st.radio("Seus chats:", list(range(len(nomes))),
                   index=st.session_state.chat_atual,
                   format_func=lambda i: nomes[i])
    st.session_state.chat_atual = idx

    st.divider()
    # Modos liberados conforme plano
    modos_por_plano = {
        "Free": ["üí¨ Mini", "üçÉ Econ√¥mico", "‚úçÔ∏è Escritor", "üè´ Escola", "üîµ Normal"],
        "Pro": ["‚ö° Flash", "üîµ Normal", "üíé Pro (Beta)", "‚úçÔ∏è Escritor", "üè´ Escola"],
        "Ultra": list(MODOS_DESC.keys()),
        "Trabalho": ["üë®‚Äçüè´ Professor", "üé® Designer", "üíª Codificador", "üß© Estrat√©gias", "‚úçÔ∏è Escritor", "üè´ Escola"],
        "Professor": ["üë®‚Äçüè´ Professor", "üè´ Escola", "‚úçÔ∏è Escritor", "üîµ Normal"],
    }

    modos_disponiveis = modos_por_plano.get(st.session_state.plano, list(MODOS_DESC.keys()))
    modo = st.selectbox("Modo:", modos_disponiveis, index=0)
    st.caption(MODOS_DESC.get(modo, ""))

# ==============================
# √ÅREA PRINCIPAL DO CHAT
# ==============================
chat = st.session_state.chats[st.session_state.chat_atual]
st.markdown(f"### üí¨ {chat['nome']}")

for m in chat["historico"]:
    bubble_bg = "#2b313e" if m["autor"] == "Voc√™" else "#ececf1"
    color = "#fff" if m["autor"] == "Voc√™" else "#000"
    st.markdown(
        f"<div style='background:{bubble_bg};color:{color};padding:10px;border-radius:10px;margin:6px 0;'>"
        f"<b>{m['autor']}:</b> {m['texto']}</div>",
        unsafe_allow_html=True
    )

msg = st.chat_input("Digite sua mensagem...")
if msg:
    chat["historico"].append({"autor": "Voc√™", "texto": msg})
    with st.spinner("üß† Pensando..."):
        resposta = gerar_resposta(modo, msg, chat["historico"])
    chat["historico"].append({"autor": "PrimeBud", "texto": resposta})
    st.rerun()

